name: Remote Training (12h)

on:
  schedule:
    - cron: '30 6 * * *'
  workflow_dispatch: {}

jobs:
  train:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Prepare environment
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TELEGRAM_ENABLED: 'true'
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY || secrets.SUPABASE_KEY }}
        run: |
          # Write minimal .env if needed for scripts that expect it
          if [ ! -f .env ]; then
            echo "OPENAI_API_KEY=${OPENAI_API_KEY}" > .env
            if [ -n "${SUPABASE_URL}" ]; then echo "SUPABASE_URL=${SUPABASE_URL}" >> .env; fi
            if [ -n "${SUPABASE_KEY}" ]; then echo "SUPABASE_SERVICE_KEY=${SUPABASE_KEY}" >> .env; fi
          fi

      - name: Run training
        env:
          TELEGRAM_ENABLED: 'true'
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY || secrets.SUPABASE_KEY }}
        run: |
          set -e
          # Basic precheck for Supabase
          if [ -z "${SUPABASE_URL}" ] || [ -z "${SUPABASE_KEY}" ]; then
            echo "supabase_url is required (and SUPABASE_KEY or SUPABASE_SERVICE_KEY)" | tee -a training.log
            exit 2
          fi
          python simple_training.py | tee -a training.log
          python dynamic_instruction_generator.py | tee -a training.log

      - name: Send Telegram summary
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          send() {
            local TEXT="$1"
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_CHAT_ID}" \
              -d parse_mode="HTML" \
              --data-urlencode text="$TEXT" >/dev/null 2>&1 || true
          }
          STATUS="${{ job.status }}"
          # Friendly note if precheck failed
          if grep -q "supabase_url is required" training.log 2>/dev/null; then
            NOTE="\n‚ö†Ô∏è Gerekli Secrets eksik: SUPABASE_URL ve SUPABASE_SERVICE_KEY/SUPABASE_KEY"
          else
            NOTE=""
          fi
          if [ -f training.log ]; then
            TAIL=$(tail -c 3000 training.log | sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g')
          else
            TAIL="(no log)"
          fi
          send "ü§ñ H√ºner AI Actions run\n<b>Durum:</b> ${STATUS}${NOTE}\n<pre>${TAIL}</pre>"

      - name: Commit updated files (optional)
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add -A
          if ! git diff --staged --quiet; then
            git commit -m "chore(training): update instructions/log via Actions"
            git push
          fi


